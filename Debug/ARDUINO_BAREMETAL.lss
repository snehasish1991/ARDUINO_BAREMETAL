
ARDUINO_BAREMETAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800100  00800100  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b67  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085f  00000000  00000000  00000ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053c  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000517  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000552  00000000  00000000  000022e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002835  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 31       	cpi	r26, 0x16	; 22
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  88:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <set_baudRate>:
		//currentIndex+= MTU;
		if(currentIndex>=(2*MTU)) {
			currentIndex = 0x00;
		}
	}
}
  90:	fc 01       	movw	r30, r24
  92:	20 81       	ld	r18, Z
  94:	31 81       	ldd	r19, Z+1	; 0x01
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	60 e4       	ldi	r22, 0x40	; 64
  9c:	72 e4       	ldi	r23, 0x42	; 66
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__udivmodsi4>
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	31 09       	sbc	r19, r1
  aa:	c9 01       	movw	r24, r18
  ac:	88 27       	eor	r24, r24
  ae:	9f 70       	andi	r25, 0x0F	; 15
  b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  b4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b8:	08 95       	ret

000000ba <UART_inital_configuration>:
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	ec 01       	movw	r28, r24
  c0:	04 96       	adiw	r24, 0x04	; 4
  c2:	0e 94 48 00 	call	0x90	; 0x90 <set_baudRate>
  c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <startIndex>
  ce:	88 e9       	ldi	r24, 0x98	; 152
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  d4:	78 94       	sei
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	87 30       	cpi	r24, 0x07	; 7
  da:	69 f0       	breq	.+26     	; 0xf6 <UART_inital_configuration+0x3c>
  dc:	18 f4       	brcc	.+6      	; 0xe4 <UART_inital_configuration+0x2a>
  de:	86 30       	cpi	r24, 0x06	; 6
  e0:	31 f0       	breq	.+12     	; 0xee <UART_inital_configuration+0x34>
  e2:	14 c0       	rjmp	.+40     	; 0x10c <UART_inital_configuration+0x52>
  e4:	88 30       	cpi	r24, 0x08	; 8
  e6:	59 f0       	breq	.+22     	; 0xfe <UART_inital_configuration+0x44>
  e8:	89 30       	cpi	r24, 0x09	; 9
  ea:	69 f0       	breq	.+26     	; 0x106 <UART_inital_configuration+0x4c>
  ec:	0f c0       	rjmp	.+30     	; 0x10c <UART_inital_configuration+0x52>
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  f4:	0b c0       	rjmp	.+22     	; 0x10c <UART_inital_configuration+0x52>
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  fc:	07 c0       	rjmp	.+14     	; 0x10c <UART_inital_configuration+0x52>
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 104:	03 c0       	rjmp	.+6      	; 0x10c <UART_inital_configuration+0x52>
 106:	8e e0       	ldi	r24, 0x0E	; 14
 108:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	29 f4       	brne	.+10     	; 0x11c <UART_inital_configuration+0x62>
 112:	e2 ec       	ldi	r30, 0xC2	; 194
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	80 83       	st	Z, r24
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	19 f0       	breq	.+6      	; 0x128 <UART_inital_configuration+0x6e>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	31 f0       	breq	.+12     	; 0x132 <UART_inital_configuration+0x78>
 126:	0a c0       	rjmp	.+20     	; 0x13c <UART_inital_configuration+0x82>
 128:	e2 ec       	ldi	r30, 0xC2	; 194
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	80 83       	st	Z, r24
 132:	e2 ec       	ldi	r30, 0xC2	; 194
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 63       	ori	r24, 0x30	; 48
 13a:	80 83       	st	Z, r24
 13c:	88 81       	ld	r24, Y
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	29 f4       	brne	.+10     	; 0x14c <UART_inital_configuration+0x92>
 142:	e2 ec       	ldi	r30, 0xC2	; 194
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <__vector_18>:
int32_t count = 0;
ISR(USART_RX_vect) {
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	ringBuff[startIndex] = UDR0;
 164:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startIndex>
 168:	e8 2f       	mov	r30, r24
 16a:	08 2e       	mov	r0, r24
 16c:	00 0c       	add	r0, r0
 16e:	ff 0b       	sbc	r31, r31
 170:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 174:	ee 5f       	subi	r30, 0xFE	; 254
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	90 83       	st	Z, r25
			UDR0 = ringBuff[count]; //(uint8_t)buffer[i]; //copy data to register to be trasnmitted
			while (!(UCSR0A & (1<<TXC0))); //check if transmission is complete
		}
	}
	#endif
	startIndex++;
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startIndex>
	if(startIndex>=(2*MTU)) 
 180:	84 31       	cpi	r24, 0x14	; 20
 182:	14 f0       	brlt	.+4      	; 0x188 <__vector_18+0x36>
		startIndex = 0x00;	
 184:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <startIndex>
}
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <setup_peripherals>:
#include <inttypes.h>
#include <string.h>
#include "Drivers/include/uart_devel.h"

void setup_peripherals(struct uartConfig *__UART_CONFIGURATION) 
{
 19a:	fc 01       	movw	r30, r24

	/***********UART Initial Configuration begin*********************/
	
	
	__UART_CONFIGURATION->mode = Asynchronous;
 19c:	10 82       	st	Z, r1
	__UART_CONFIGURATION->parity = NO_PARITY;
 19e:	11 82       	std	Z+1, r1	; 0x01
	__UART_CONFIGURATION->stopBit = 1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	82 83       	std	Z+2, r24	; 0x02
	__UART_CONFIGURATION->dataBit = 8;
 1a4:	88 e0       	ldi	r24, 0x08	; 8
 1a6:	83 83       	std	Z+3, r24	; 0x03
	__UART_CONFIGURATION->baudrate = 9600;
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	95 e2       	ldi	r25, 0x25	; 37
 1ac:	95 83       	std	Z+5, r25	; 0x05
 1ae:	84 83       	std	Z+4, r24	; 0x04
	UART_inital_configuration(__UART_CONFIGURATION);
 1b0:	cf 01       	movw	r24, r30
 1b2:	0e 94 5d 00 	call	0xba	; 0xba <UART_inital_configuration>
 1b6:	08 95       	ret

000001b8 <main>:

	/***********UART Initial Configuration ends*********************/
}

int32_t main(void)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	00 d0       	rcall	.+0      	; 0x1be <main+0x6>
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <main+0x8>
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <main+0xa>
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	char buffer[20]={0x00}; //{0x01, 0x02, 0x03, 0x04, 0x05};
	struct uartConfig __UART_CONFIGURATION;
	setup_peripherals(&__UART_CONFIGURATION);
 1c6:	ce 01       	movw	r24, r28
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	0e 94 cd 00 	call	0x19a	; 0x19a <setup_peripherals>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	2f e7       	ldi	r18, 0x7F	; 127
 1d0:	84 e8       	ldi	r24, 0x84	; 132
 1d2:	9e e1       	ldi	r25, 0x1E	; 30
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x1c>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x26>
 1de:	00 00       	nop
 1e0:	f6 cf       	rjmp	.-20     	; 0x1ce <main+0x16>

000001e2 <__udivmodsi4>:
 1e2:	a1 e2       	ldi	r26, 0x21	; 33
 1e4:	1a 2e       	mov	r1, r26
 1e6:	aa 1b       	sub	r26, r26
 1e8:	bb 1b       	sub	r27, r27
 1ea:	fd 01       	movw	r30, r26
 1ec:	0d c0       	rjmp	.+26     	; 0x208 <__udivmodsi4_ep>

000001ee <__udivmodsi4_loop>:
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	ee 1f       	adc	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	a2 17       	cp	r26, r18
 1f8:	b3 07       	cpc	r27, r19
 1fa:	e4 07       	cpc	r30, r20
 1fc:	f5 07       	cpc	r31, r21
 1fe:	20 f0       	brcs	.+8      	; 0x208 <__udivmodsi4_ep>
 200:	a2 1b       	sub	r26, r18
 202:	b3 0b       	sbc	r27, r19
 204:	e4 0b       	sbc	r30, r20
 206:	f5 0b       	sbc	r31, r21

00000208 <__udivmodsi4_ep>:
 208:	66 1f       	adc	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	88 1f       	adc	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	1a 94       	dec	r1
 212:	69 f7       	brne	.-38     	; 0x1ee <__udivmodsi4_loop>
 214:	60 95       	com	r22
 216:	70 95       	com	r23
 218:	80 95       	com	r24
 21a:	90 95       	com	r25
 21c:	9b 01       	movw	r18, r22
 21e:	ac 01       	movw	r20, r24
 220:	bd 01       	movw	r22, r26
 222:	cf 01       	movw	r24, r30
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
