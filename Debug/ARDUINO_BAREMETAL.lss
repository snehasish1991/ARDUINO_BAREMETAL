
ARDUINO_BAREMETAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af7  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000831  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c9  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cc  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ad  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000252d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 08 01 	call	0x210	; 0x210 <main>
  78:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <set_baudRate>:


//function to set baud rate
void set_baudRate(uint16_t *baudrate) {
    uint16_t _UBRRn = 0x00; //(int16_t)(FOSC/(16/(__baudrate))) - 1;
	calc_UBRR(*baudrate, _UBRRn);
  80:	fc 01       	movw	r30, r24
  82:	20 81       	ld	r18, Z
  84:	31 81       	ldd	r19, Z+1	; 0x01
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	60 e4       	ldi	r22, 0x40	; 64
  8c:	72 e4       	ldi	r23, 0x42	; 66
  8e:	8f e0       	ldi	r24, 0x0F	; 15
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 43 01 	call	0x286	; 0x286 <__udivmodsi4>
  96:	21 50       	subi	r18, 0x01	; 1
  98:	31 09       	sbc	r19, r1
	UBRR0H = (uint8_t)((_UBRRn & UBRRnH_MASK)>>8);
  9a:	c9 01       	movw	r24, r18
  9c:	88 27       	eor	r24, r24
  9e:	9f 70       	andi	r25, 0x0F	; 15
  a0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(_UBRRn & UBRRnL_MASK);
  a4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  a8:	08 95       	ret

000000aa <UART_inital_configuration>:
}

//function to set initial configuration
void UART_inital_configuration(struct uartConfig *__UART_CONFIGURATION) {
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
    set_baudRate(&__UART_CONFIGURATION->baudrate);
  b0:	04 96       	adiw	r24, 0x04	; 4
  b2:	0e 94 40 00 	call	0x80	; 0x80 <set_baudRate>
    //UCSR0B is a 8bit Register where each bit means a configuration
    //see ATMEGA_328p_IO.h for reference.
    UCSR0B = (1<<RXEN0)|(1<<TXEN0); //enable both receiver and tranmitter
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    //set data format
    //case 5: 5bit
    //case 6: 6bit
    //case 7: 7bit
    //case 8: 8bit
    switch(__UART_CONFIGURATION->dataBit)
  bc:	8b 81       	ldd	r24, Y+3	; 0x03
  be:	87 30       	cpi	r24, 0x07	; 7
  c0:	69 f0       	breq	.+26     	; 0xdc <UART_inital_configuration+0x32>
  c2:	18 f4       	brcc	.+6      	; 0xca <UART_inital_configuration+0x20>
  c4:	86 30       	cpi	r24, 0x06	; 6
  c6:	31 f0       	breq	.+12     	; 0xd4 <UART_inital_configuration+0x2a>
  c8:	14 c0       	rjmp	.+40     	; 0xf2 <UART_inital_configuration+0x48>
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	59 f0       	breq	.+22     	; 0xe4 <UART_inital_configuration+0x3a>
  ce:	89 30       	cpi	r24, 0x09	; 9
  d0:	69 f0       	breq	.+26     	; 0xec <UART_inital_configuration+0x42>
  d2:	0f c0       	rjmp	.+30     	; 0xf2 <UART_inital_configuration+0x48>
    {
        case 5: break;
        case 6: UCSR0C = 0x1<<UCSZ00;
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
                break;
  da:	0b c0       	rjmp	.+22     	; 0xf2 <UART_inital_configuration+0x48>
        case 7: UCSR0C = 0x2<<UCSZ00;
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
                break;
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <UART_inital_configuration+0x48>
        case 8: UCSR0C = 0x3<<UCSZ00;
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
                break;
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <UART_inital_configuration+0x48>
        case 9: UCSR0C = 0x7<<UCSZ00;
  ec:	8e e0       	ldi	r24, 0x0E	; 14
  ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    //stop bit configuration
    //see http://exploreembedded.com/wiki/UART_Programming_with_Atmega128 
    //for more clarity
    //case 1: 1 bit for stop bit
    //case 2: 2 bits for stop bit
    switch(__UART_CONFIGURATION->stopBit)
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	29 f4       	brne	.+10     	; 0x102 <UART_inital_configuration+0x58>
    {
        case 1: break;
        case 2: UCSR0C|= 0x1<<UCSZ00;
  f8:	e2 ec       	ldi	r30, 0xC2	; 194
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	80 83       	st	Z, r24
    //see http://exploreembedded.com/wiki/UART_Programming_with_Atmega128 
    //for more clarity
    //case 0: No parity
    //case 1: even parity
    //case 2: odd parity
    switch(__UART_CONFIGURATION->parity) {
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	19 f0       	breq	.+6      	; 0x10e <UART_inital_configuration+0x64>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	31 f0       	breq	.+12     	; 0x118 <UART_inital_configuration+0x6e>
 10c:	0a c0       	rjmp	.+20     	; 0x122 <UART_inital_configuration+0x78>
        case 0: break; 
        case 1: UCSR0C|= 0x2<<UPM00;
 10e:	e2 ec       	ldi	r30, 0xC2	; 194
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 62       	ori	r24, 0x20	; 32
 116:	80 83       	st	Z, r24
        case 2: UCSR0C|= 0x3<<UPM00;
 118:	e2 ec       	ldi	r30, 0xC2	; 194
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 63       	ori	r24, 0x30	; 48
 120:	80 83       	st	Z, r24
    //mode configuration
    //see http://exploreembedded.com/wiki/UART_Programming_with_Atmega128 
    //for more clarity
    //case 0: Asynchronous mode
    //case 1: Synchronous mode
    switch(__UART_CONFIGURATION->mode) {
 122:	88 81       	ld	r24, Y
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	29 f4       	brne	.+10     	; 0x132 <UART_inital_configuration+0x88>
        case 0: break;
        case 1: UCSR0C|= 0x1<<UMSEL00;
 128:	e2 ec       	ldi	r30, 0xC2	; 194
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
                break;
    }
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <transmitUART_Poll>:

//function to transmit byte by byte over UART channel using polling
void transmitUART_Poll(uint8_t *buffer, int32_t *len, struct uartConfig *__UART_CONFIGURATION) {
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	fc 01       	movw	r30, r24
 142:	db 01       	movw	r26, r22
    int32_t i = 0x00;
	uint8_t byte = 0x00;
    switch(__UART_CONFIGURATION->dataBit) {
 144:	ea 01       	movw	r28, r20
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	85 50       	subi	r24, 0x05	; 5
 14a:	84 30       	cpi	r24, 0x04	; 4
 14c:	a0 f0       	brcs	.+40     	; 0x176 <transmitUART_Poll+0x3e>
 14e:	20 c0       	rjmp	.+64     	; 0x190 <transmitUART_Poll+0x58>
        case 5:
        case 6:
        case 7:
        case 8: for(i=0;i<(*len);i++) {
                    while (!(UCSR0A & (1<<UDRE0))); //wait for trasnmit buffer to be empty
 150:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 154:	95 ff       	sbrs	r25, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <transmitUART_Poll+0x18>
					byte = (uint8_t)buffer[i];
 158:	ef 01       	movw	r28, r30
 15a:	c4 0f       	add	r28, r20
 15c:	d5 1f       	adc	r29, r21
 15e:	98 81       	ld	r25, Y
                    UDR0 = byte; //(uint8_t)buffer[i]; //copy data to register to be trasnmitted
 160:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
                    while (!(UCSR0A & (1<<TXC0))); //check if transmission is complete
 164:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 168:	96 ff       	sbrs	r25, 6
 16a:	fc cf       	rjmp	.-8      	; 0x164 <transmitUART_Poll+0x2c>
	uint8_t byte = 0x00;
    switch(__UART_CONFIGURATION->dataBit) {
        case 5:
        case 6:
        case 7:
        case 8: for(i=0;i<(*len);i++) {
 16c:	4f 5f       	subi	r20, 0xFF	; 255
 16e:	5f 4f       	sbci	r21, 0xFF	; 255
 170:	6f 4f       	sbci	r22, 0xFF	; 255
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	03 c0       	rjmp	.+6      	; 0x17c <transmitUART_Poll+0x44>

//function to transmit byte by byte over UART channel using polling
void transmitUART_Poll(uint8_t *buffer, int32_t *len, struct uartConfig *__UART_CONFIGURATION) {
    int32_t i = 0x00;
	uint8_t byte = 0x00;
    switch(__UART_CONFIGURATION->dataBit) {
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	ba 01       	movw	r22, r20
        case 5:
        case 6:
        case 7:
        case 8: for(i=0;i<(*len);i++) {
 17c:	0d 91       	ld	r16, X+
 17e:	1d 91       	ld	r17, X+
 180:	2d 91       	ld	r18, X+
 182:	3c 91       	ld	r19, X
 184:	13 97       	sbiw	r26, 0x03	; 3
 186:	40 17       	cp	r20, r16
 188:	51 07       	cpc	r21, r17
 18a:	62 07       	cpc	r22, r18
 18c:	73 07       	cpc	r23, r19
 18e:	04 f3       	brlt	.-64     	; 0x150 <transmitUART_Poll+0x18>
                    while (!(UCSR0A & (1<<UDRE0))); //wait for trasnmit buffer to be empty
                    
                }*/
                break;
    }
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <readUART_Poll>:

//function to receive byte by byte over UART channel using polling
void readUART_Poll(uint8_t *buffer, int32_t *len, struct uartConfig *__UART_CONFIGURATION) {
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	dc 01       	movw	r26, r24
 1a4:	eb 01       	movw	r28, r22
    int32_t i = 0x00;
	switch(__UART_CONFIGURATION->dataBit) {
 1a6:	fa 01       	movw	r30, r20
 1a8:	83 81       	ldd	r24, Z+3	; 0x03
 1aa:	85 50       	subi	r24, 0x05	; 5
 1ac:	84 30       	cpi	r24, 0x04	; 4
 1ae:	80 f0       	brcs	.+32     	; 0x1d0 <readUART_Poll+0x36>
 1b0:	1b c0       	rjmp	.+54     	; 0x1e8 <readUART_Poll+0x4e>
        case 5:
        case 6:
        case 7:
        case 8: for(i=0;i<(*len);i++) {
                    while(!(UCSR0A & (1<<RXC0))); //wait for stop bit to be received
 1b2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1b6:	99 23       	and	r25, r25
 1b8:	e4 f7       	brge	.-8      	; 0x1b2 <readUART_Poll+0x18>
                    buffer[i] = UDR0; //copy received byte to buffer
 1ba:	fd 01       	movw	r30, r26
 1bc:	e4 0f       	add	r30, r20
 1be:	f5 1f       	adc	r31, r21
 1c0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c4:	90 83       	st	Z, r25
    int32_t i = 0x00;
	switch(__UART_CONFIGURATION->dataBit) {
        case 5:
        case 6:
        case 7:
        case 8: for(i=0;i<(*len);i++) {
 1c6:	4f 5f       	subi	r20, 0xFF	; 255
 1c8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ca:	6f 4f       	sbci	r22, 0xFF	; 255
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <readUART_Poll+0x3c>
}

//function to receive byte by byte over UART channel using polling
void readUART_Poll(uint8_t *buffer, int32_t *len, struct uartConfig *__UART_CONFIGURATION) {
    int32_t i = 0x00;
	switch(__UART_CONFIGURATION->dataBit) {
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	ba 01       	movw	r22, r20
        case 5:
        case 6:
        case 7:
        case 8: for(i=0;i<(*len);i++) {
 1d6:	08 81       	ld	r16, Y
 1d8:	19 81       	ldd	r17, Y+1	; 0x01
 1da:	2a 81       	ldd	r18, Y+2	; 0x02
 1dc:	3b 81       	ldd	r19, Y+3	; 0x03
 1de:	40 17       	cp	r20, r16
 1e0:	51 07       	cpc	r21, r17
 1e2:	62 07       	cpc	r22, r18
 1e4:	73 07       	cpc	r23, r19
 1e6:	2c f3       	brlt	.-54     	; 0x1b2 <readUART_Poll+0x18>
                break;
        case 9: //TODO for databit size 9
                break;
    }
    
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <setup_peripherals>:
#include <inttypes.h>
#include <string.h>
#include "Drivers/include/uart_devel.h"

void setup_peripherals(struct uartConfig *__UART_CONFIGURATION) 
{
 1f2:	fc 01       	movw	r30, r24

	/***********UART Initial Configuration begin*********************/
	
	
	__UART_CONFIGURATION->mode = Asynchronous;
 1f4:	10 82       	st	Z, r1
	__UART_CONFIGURATION->parity = NO_PARITY;
 1f6:	11 82       	std	Z+1, r1	; 0x01
	__UART_CONFIGURATION->stopBit = 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	82 83       	std	Z+2, r24	; 0x02
	__UART_CONFIGURATION->dataBit = 8;
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	83 83       	std	Z+3, r24	; 0x03
	__UART_CONFIGURATION->baudrate = 9600;
 200:	80 e8       	ldi	r24, 0x80	; 128
 202:	95 e2       	ldi	r25, 0x25	; 37
 204:	95 83       	std	Z+5, r25	; 0x05
 206:	84 83       	std	Z+4, r24	; 0x04
	UART_inital_configuration(__UART_CONFIGURATION);
 208:	cf 01       	movw	r24, r30
 20a:	0e 94 55 00 	call	0xaa	; 0xaa <UART_inital_configuration>
 20e:	08 95       	ret

00000210 <main>:

	/***********UART Initial Configuration ends*********************/
}

int32_t  main(void)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	6e 97       	sbiw	r28, 0x1e	; 30
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	char buffer[20]={0x00}; //{0x01, 0x02, 0x03, 0x04, 0x05};
 224:	fe 01       	movw	r30, r28
 226:	31 96       	adiw	r30, 0x01	; 1
 228:	84 e1       	ldi	r24, 0x14	; 20
 22a:	df 01       	movw	r26, r30
 22c:	1d 92       	st	X+, r1
 22e:	8a 95       	dec	r24
 230:	e9 f7       	brne	.-6      	; 0x22c <main+0x1c>
	struct uartConfig __UART_CONFIGURATION;
	setup_peripherals(&__UART_CONFIGURATION);
 232:	ce 01       	movw	r24, r28
 234:	45 96       	adiw	r24, 0x15	; 21
 236:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <setup_peripherals>
	int32_t len = 11; //strlen("hello world");
 23a:	8b e0       	ldi	r24, 0x0B	; 11
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	a0 e0       	ldi	r26, 0x00	; 0
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	8b 8f       	std	Y+27, r24	; 0x1b
 244:	9c 8f       	std	Y+28, r25	; 0x1c
 246:	ad 8f       	std	Y+29, r26	; 0x1d
 248:	be 8f       	std	Y+30, r27	; 0x1e
    while (1) 
    {
		readUART_Poll((uint8_t *)buffer, &len, &__UART_CONFIGURATION);
 24a:	ae 01       	movw	r20, r28
 24c:	4b 5e       	subi	r20, 0xEB	; 235
 24e:	5f 4f       	sbci	r21, 0xFF	; 255
 250:	be 01       	movw	r22, r28
 252:	65 5e       	subi	r22, 0xE5	; 229
 254:	7f 4f       	sbci	r23, 0xFF	; 255
 256:	ce 01       	movw	r24, r28
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	0e 94 cd 00 	call	0x19a	; 0x19a <readUART_Poll>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	bf e7       	ldi	r27, 0x7F	; 127
 260:	24 e8       	ldi	r18, 0x84	; 132
 262:	8e e1       	ldi	r24, 0x1E	; 30
 264:	b1 50       	subi	r27, 0x01	; 1
 266:	20 40       	sbci	r18, 0x00	; 0
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x54>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x5e>
 26e:	00 00       	nop
		_delay_ms(10000);
		//if(strlen(buffer)>0x00)
		transmitUART_Poll((uint8_t *)buffer, &len, &__UART_CONFIGURATION);
 270:	ae 01       	movw	r20, r28
 272:	4b 5e       	subi	r20, 0xEB	; 235
 274:	5f 4f       	sbci	r21, 0xFF	; 255
 276:	be 01       	movw	r22, r28
 278:	65 5e       	subi	r22, 0xE5	; 229
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	ce 01       	movw	r24, r28
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	0e 94 9c 00 	call	0x138	; 0x138 <transmitUART_Poll>
 284:	e2 cf       	rjmp	.-60     	; 0x24a <main+0x3a>

00000286 <__udivmodsi4>:
 286:	a1 e2       	ldi	r26, 0x21	; 33
 288:	1a 2e       	mov	r1, r26
 28a:	aa 1b       	sub	r26, r26
 28c:	bb 1b       	sub	r27, r27
 28e:	fd 01       	movw	r30, r26
 290:	0d c0       	rjmp	.+26     	; 0x2ac <__udivmodsi4_ep>

00000292 <__udivmodsi4_loop>:
 292:	aa 1f       	adc	r26, r26
 294:	bb 1f       	adc	r27, r27
 296:	ee 1f       	adc	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	a2 17       	cp	r26, r18
 29c:	b3 07       	cpc	r27, r19
 29e:	e4 07       	cpc	r30, r20
 2a0:	f5 07       	cpc	r31, r21
 2a2:	20 f0       	brcs	.+8      	; 0x2ac <__udivmodsi4_ep>
 2a4:	a2 1b       	sub	r26, r18
 2a6:	b3 0b       	sbc	r27, r19
 2a8:	e4 0b       	sbc	r30, r20
 2aa:	f5 0b       	sbc	r31, r21

000002ac <__udivmodsi4_ep>:
 2ac:	66 1f       	adc	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	88 1f       	adc	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	1a 94       	dec	r1
 2b6:	69 f7       	brne	.-38     	; 0x292 <__udivmodsi4_loop>
 2b8:	60 95       	com	r22
 2ba:	70 95       	com	r23
 2bc:	80 95       	com	r24
 2be:	90 95       	com	r25
 2c0:	9b 01       	movw	r18, r22
 2c2:	ac 01       	movw	r20, r24
 2c4:	bd 01       	movw	r22, r26
 2c6:	cf 01       	movw	r24, r30
 2c8:	08 95       	ret

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
